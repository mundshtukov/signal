import requests
import asyncio
import random
from config import BINANCE_API_URL, COINGECKO_API_URL, ALTERNATIVE_API_URL
from utils import calculate_risk_reward, format_signal
from datetime import datetime, timedelta

async def sleep_random():
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 0.7 –¥–æ 0.9 —Å–µ–∫—É–Ω–¥—ã"""
    await asyncio.sleep(random.uniform(0.7, 0.9))

def validate_ticker(ticker):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–∞ Binance."""
    try:
        url = f"{BINANCE_API_URL}/api/v3/exchangeInfo"
        params = {'symbol': f"{ticker}USDT"}
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        return 'symbols' in data and len(data['symbols']) > 0
    except requests.RequestException:
        return False

def get_klines(symbol, interval, limit=100):
    try:
        url = f"{BINANCE_API_URL}/api/v3/klines"
        params = {'symbol': symbol, 'interval': interval, 'limit': limit}
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è {symbol}: {e}")
        return None

def get_top_pairs():
    try:
        url = f"{BINANCE_API_URL}/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        pairs = [p for p in response.json() if p['symbol'].endswith('USDT')]
        return sorted(pairs, key=lambda x: float(x['volume']) * float(x['lastPrice']), reverse=True)[:50]
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-–ø–∞—Ä: {e}")
        return []

def calculate_sma(data, period):
    if not data or len(data) < period:
        return None
    closes = [float(candle[4]) for candle in data]
    return sum(closes[-period:]) / period

def calculate_rsi(data, period=14):
    if not data or len(data) < period:
        return None
    closes = [float(candle[4]) for candle in data]
    gains = losses = 0
    for i in range(1, period):
        diff = closes[i] - closes[i-1]
        if diff > 0:
            gains += diff
        else:
            losses -= diff
    avg_gain = gains / period
    avg_loss = losses / period
    rs = avg_gain / avg_loss if avg_loss != 0 else 0
    return 100 - (100 / (1 + rs))

def get_support_resistance_levels(data_4h, data_1h):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
    if not data_4h or not data_1h:
        return None, None

    # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
    recent_4h = data_4h[-30:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–≤–µ—á–µ–π 4h
    recent_1h = data_1h[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π 1h

    # –£—Ä–æ–≤–Ω–∏ —Å 4h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ)
    lows_4h = [float(candle[3]) for candle in recent_4h]
    highs_4h = [float(candle[2]) for candle in recent_4h]

    # –£—Ä–æ–≤–Ω–∏ —Å 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞)
    lows_1h = [float(candle[3]) for candle in recent_1h]
    highs_1h = [float(candle[2]) for candle in recent_1h]

    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –±–µ—Ä–µ–º —Å–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ –º–∏–Ω–∏–º—É–º—ã –∏ —Å–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ –º–∞–∫—Å–∏–º—É–º—ã
    support = min(min(lows_4h), min(lows_1h[-20:]))  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π 1h
    resistance = max(max(highs_4h), max(highs_1h[-20:]))

    return support, resistance

def format_progress_bars(current_step, total_steps, square_type="üü¶"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã —Å –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏"""
    filled = square_type * current_step
    empty = "‚è≥" * (total_steps - current_step)
    percentage = int((current_step / total_steps) * 100)
    return f"{filled}{empty} {percentage}%"

def format_steps_list(steps, current_step):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    result = []
    for i, step_text in enumerate(steps):
        if i < current_step - 1:
            result.append(f"‚úÖ {step_text}")
        elif i == current_step - 1:
            result.append(f"üîÑ {step_text}")
    return result

async def analyze_ticker(ticker, update):
    symbol = f"{ticker}USDT"

    # –≠—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–∫–µ—Ä–∞
    steps = [
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API...",
        "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...", 
        "–†–∞—Å—á–µ—Ç SMA50 –∏ SMA200...",
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –≤—Ö–æ–¥–∞...",
        "–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å...",
        "–°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤!"
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    progress_message = await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")

    if not validate_ticker(ticker):
        await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ä {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–ª–∏ ETH.")
        return f"‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ä {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–ª–∏ ETH."

    # –≠—Ç–∞–ø 1 (17%) - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ)
    await asyncio.sleep(0.7)
    progress_bars = format_progress_bars(1, 6, "üü¶")
    steps_list = format_steps_list(steps, 1)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    data_1d = get_klines(symbol, '1d', 200)
    data_4h = get_klines(symbol, '4h', 100)
    data_1h = get_klines(symbol, '1h', 50)

    if not (data_1d and data_4h and data_1h):
        await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É.")
        return f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É."

    # –≠—Ç–∞–ø 2 (33%) - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–º–µ–¥–ª–µ–Ω–Ω–æ)
    await asyncio.sleep(1.5)
    progress_bars = format_progress_bars(2, 6, "üü¶")
    steps_list = format_steps_list(steps, 2)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    current_price = float(data_1h[-1][4])
    sma_50_1d = calculate_sma(data_1d, 50)
    sma_200_1d = calculate_sma(data_1d, 200)

    if sma_50_1d is None or sma_200_1d is None:
        await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è {ticker}.")
        return f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è {ticker}."

    # –≠—Ç–∞–ø 3 (50%) - —Ä–∞—Å—á–µ—Ç SMA (—Å—Ä–µ–¥–Ω–µ)
    await asyncio.sleep(1.2)
    progress_bars = format_progress_bars(3, 6, "üü¶")
    steps_list = format_steps_list(steps, 3)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    direction = 'Long' if sma_50_1d > sma_200_1d else 'Short'
    support, resistance = get_support_resistance_levels(data_4h, data_1h)

    if support is None or resistance is None:
        await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –¥–ª—è {ticker}.")
        return f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –¥–ª—è {ticker}."

    # –≠—Ç–∞–ø 4 (67%) - —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞ (—Å—Ä–µ–¥–Ω–µ)
    await asyncio.sleep(1.0)
    progress_bars = format_progress_bars(4, 6, "üü¶")
    steps_list = format_steps_list(steps, 4)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    entry_price = support * 1.005 if direction == 'Long' else resistance * 0.995  # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
    stop_loss = support * 0.98 if direction == 'Long' else resistance * 1.02
    take_profit = resistance if direction == 'Long' else support
    risk_reward = calculate_risk_reward(entry_price, stop_loss, take_profit)

    # –≠—Ç–∞–ø 5 (83%) - —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å (–±—ã—Å—Ç—Ä–µ–µ)
    await asyncio.sleep(0.8)
    progress_bars = format_progress_bars(5, 6, "üü¶")
    steps_list = format_steps_list(steps, 5)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    stop_loss_pct = ((stop_loss - entry_price) / entry_price) * 100
    take_profit_pct = ((take_profit - entry_price) / entry_price) * 100
    cancel_price = support * 0.99 if direction == 'Long' else resistance * 1.01

    explanation = f"{direction} –Ω–∞ –æ—Å–Ω–æ–≤–µ {'–æ—Ç—Å–∫–æ–∫–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏' if direction == 'Long' else '–æ—Ç—Å–∫–æ–∫–∞ –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è'} —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ç—Ä–µ–Ω–¥–∞."
    warning = "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å." if risk_reward < 2 else ""

    # –≠—Ç–∞–ø 6 (100%) - –≥–æ—Ç–æ–≤–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
    await asyncio.sleep(0.3)
    progress_bars = format_progress_bars(6, 6, "üü¶")
    steps_list = format_steps_list(steps, 6)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫

    signal = format_signal(symbol, current_price, direction, entry_price, stop_loss, take_profit, stop_loss_pct, take_profit_pct, risk_reward, cancel_price, warning, sma_50_1d, sma_200_1d, support, resistance)

    await progress_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    return signal

async def get_best_signals(direction, update):
    # –≠—Ç–∞–ø—ã –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    steps = [
        "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø-50 –ø–∞—Ä...",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: 0/30",
        "–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: 0", 
        "–û—Ç–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!"
    ]

    # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
    square_type = "üü©" if direction == 'long' else "üü•"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    progress_message = await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞...")

    pairs = get_top_pairs()
    if not pairs:
        await progress_message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä.")
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä."

    # –≠—Ç–∞–ø 1 (25%) - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ)
    await asyncio.sleep(0.8)
    progress_bars = format_progress_bars(1, 4, square_type)
    steps_list = format_steps_list(steps, 1)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    signals = []
    processed_count = 0
    found_signals = 0
    max_to_process = 30

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ —Å–Ω–∞—á–∞–ª–∞
    for pair in pairs:
        if processed_count >= max_to_process:
            break

        symbol = pair['symbol']
        processed_count += 1

        data_1d = get_klines(symbol, '1d', 200)
        data_4h = get_klines(symbol, '4h', 100)
        data_1h = get_klines(symbol, '1h', 50)

        if not (data_1d and data_4h and data_1h):
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω {symbol} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            continue

        current_price = float(data_1h[-1][4])
        sma_50_1d = calculate_sma(data_1d, 50)
        sma_200_1d = calculate_sma(data_1d, 200)

        if sma_50_1d is None or sma_200_1d is None:
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω {symbol} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è SMA –¥–∞–Ω–Ω—ã—Ö.")
            continue

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        signal_direction = 'long' if sma_50_1d > sma_200_1d else 'short'
        print(f"{symbol}: SMA_50_1d={sma_50_1d:.2f}, SMA_200_1d={sma_200_1d:.2f}, Direction={signal_direction}")

        if signal_direction != direction:
            continue

        support, resistance = get_support_resistance_levels(data_4h, data_1h)

        if support is None or resistance is None:
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω {symbol} –∏–∑-–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–Ω–∏.")
            continue

        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
        entry_price = support * 1.005 if direction == 'long' else resistance * 0.995
        stop_loss = support * 0.98 if direction == 'long' else resistance * 1.02
        take_profit = resistance if direction == 'long' else support
        risk_reward = calculate_risk_reward(entry_price, stop_loss, take_profit)

        print(f"{symbol}: Entry={entry_price:.4f}, Stop={stop_loss:.4f}, Take={take_profit:.4f}, Risk/Reward={risk_reward:.2f}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å >= 2.0
        if risk_reward < 2:
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω {symbol} –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ Risk/Reward ({risk_reward:.2f}).")
            continue

        found_signals += 1
        stop_loss_pct = ((stop_loss - entry_price) / entry_price) * 100
        take_profit_pct = ((take_profit - entry_price) / entry_price) * 100
        cancel_price = support * 0.99 if direction == 'long' else resistance * 1.01

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_direction = 'Long' if direction == 'long' else 'Short'

        signals.append(format_signal(symbol, current_price, display_direction, entry_price, stop_loss, take_profit, stop_loss_pct, take_profit_pct, risk_reward, cancel_price, "", sma_50_1d, sma_200_1d, support, resistance))

        if len(signals) >= 3:
            break

    # –≠—Ç–∞–ø 2 (50%) - –∞–Ω–∞–ª–∏–∑ (—Å–∞–º—ã–π –¥–æ–ª–≥–∏–π)
    await asyncio.sleep(2.0)
    progress_bars = format_progress_bars(2, 4, square_type)
    steps[1] = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {processed_count}/30"
    steps_list = format_steps_list(steps, 2)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    # –≠—Ç–∞–ø 3 (75%) - –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å—Ä–µ–¥–Ω–µ)
    await asyncio.sleep(1.5)
    progress_bars = format_progress_bars(3, 4, square_type)
    steps[1] = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {processed_count}/30"
    steps[2] = f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: {found_signals}"
    steps_list = format_steps_list(steps, 3)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    # –≠—Ç–∞–ø 4 (100%) - —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–±—ã—Å—Ç—Ä–æ)
    await asyncio.sleep(0.7)
    progress_bars = format_progress_bars(4, 4, square_type)
    steps[1] = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {processed_count}/30"
    steps[2] = f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: {found_signals}"
    steps_list = format_steps_list(steps, 4)
    progress_text = progress_bars + "\n" + "\n".join(steps_list)
    await progress_message.edit_text(progress_text)

    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫
    await progress_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º

    if not signals:
        opposite_direction = '—à–æ—Ä—Ç' if direction == 'long' else '–ª–æ–Ω–≥'
        return f"‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–õ—É—á—à–µ–µ –≤ {opposite_direction}'."

    return "\n" + "="*50 + "\n".join(signals)