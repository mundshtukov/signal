import os
import logging
import asyncio
from threading import Thread
from flask import Flask
from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext.filters import TEXT, COMMAND
from messages import WELCOME_MESSAGE, INSTRUCTION_MESSAGE
from analysis import analyze_ticker, get_best_signals
from config import TELEGRAM_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check
app = Flask(__name__)

@app.route('/')
def health_check():
    return {'status': 'Bot is running', 'message': 'CryptoSignalBot is healthy'}, 200

@app.route('/health')
def health():
    return {'status': 'healthy'}, 200

@app.route('/status')
def status():
    return {'bot': 'active', 'service': 'telegram-crypto-bot'}, 200

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"Starting Flask server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–Ω–∏–∑—É —Å —ç–º–æ–¥–∑–∏
reply_keyboard = ReplyKeyboardMarkup(
    [
        ["üìà –õ—É—á—à–µ–µ –≤ –ª–æ–Ω–≥", "üìâ –õ—É—á—à–µ–µ –≤ —à–æ—Ä—Ç"],
        ["üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def start(update, context):
    logger.info(f"User {update.effective_user.id} started the bot")
    await update.message.reply_text(
        WELCOME_MESSAGE, 
        parse_mode='Markdown',
        reply_markup=reply_keyboard
    )

async def instruction(update, context):
    logger.info(f"User {update.effective_user.id} requested instructions")
    await update.message.reply_text(
        INSTRUCTION_MESSAGE, 
        parse_mode='Markdown',
        reply_markup=reply_keyboard
    )

async def handle_ticker(update, context):
    ticker = update.message.text
    user_id = update.effective_user.id
    
    try:
        if ticker == "üìà –õ—É—á—à–µ–µ –≤ –ª–æ–Ω–≥":
            logger.info(f"User {user_id} requested best long signals")
            signals = await get_best_signals('long', update)
            response = signals if signals else "‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'üìâ –õ—É—á—à–µ–µ –≤ —à–æ—Ä—Ç'."
            await update.message.reply_text(response, parse_mode='Markdown', reply_markup=reply_keyboard)

        elif ticker == "üìâ –õ—É—á—à–µ–µ –≤ —à–æ—Ä—Ç":
            logger.info(f"User {user_id} requested best short signals")
            signals = await get_best_signals('short', update)
            response = signals if signals else "‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'üìà –õ—É—á—à–µ–µ –≤ –ª–æ–Ω–≥'."
            await update.message.reply_text(response, parse_mode='Markdown', reply_markup=reply_keyboard)

        elif ticker == "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
            await update.message.reply_text(INSTRUCTION_MESSAGE, parse_mode='Markdown', reply_markup=reply_keyboard)

        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
            ignored_inputs = ['/START', '/INSTRUCTION']
            if ticker.upper() in [i.upper() for i in ignored_inputs]:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH).",
                    parse_mode='Markdown',
                    reply_markup=reply_keyboard
                )
                return

            logger.info(f"User {user_id} analyzing ticker: {ticker}")
            signal = await analyze_ticker(ticker.upper(), update)
            await update.message.reply_text(signal, parse_mode='Markdown', reply_markup=reply_keyboard)
            
    except Exception as e:
        logger.error(f"Error handling ticker {ticker} for user {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=reply_keyboard
        )

async def button_handler(update, context):
    query = update.callback_query
    await query.answer()
    logger.info(f"Received callback_data: {query.data}")
    await query.edit_message_text(
        "‚ùå –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–Ω–∏–∑—É.", 
        parse_mode='Markdown'
    )

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN not found in environment variables!")
        raise ValueError("TELEGRAM_TOKEN environment variable is required")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("Flask health check server started")
    
    logger.info("Starting CryptoSignalBot...")
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('instruction', instruction))
    application.add_handler(MessageHandler(TEXT & ~COMMAND, handle_ticker))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    try:
        logger.info("Bot is running with polling...")
        application.run_polling()
    except Exception as e:
        logger.error(f"Error running bot: {e}")
        raise

if __name__ == '__main__':
    main()
