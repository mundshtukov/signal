import os
from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext.filters import TEXT, COMMAND
from messages import WELCOME_MESSAGE, INSTRUCTION_MESSAGE
from analysis import analyze_ticker, get_best_signals
from config import TELEGRAM_TOKEN
from aiohttp import web
import asyncio

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–Ω–∏–∑—É —Å —ç–º–æ–¥–∑–∏
reply_keyboard = ReplyKeyboardMarkup(
    [
        ["üìà –õ—É—á—à–µ–µ –≤ –ª–æ–Ω–≥", "üìâ –õ—É—á—à–µ–µ –≤ —à–æ—Ä—Ç"],
        ["üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def start(update, context):
    await update.message.reply_text(
        WELCOME_MESSAGE, 
        parse_mode='Markdown',
        reply_markup=reply_keyboard
    )

async def instruction(update, context):
    await update.message.reply_text(
        INSTRUCTION_MESSAGE, 
        parse_mode='Markdown',
        reply_markup=reply_keyboard
    )

async def handle_ticker(update, context):
    ticker = update.message.text
    if ticker == "üìà –õ—É—á—à–µ–µ –≤ –ª–æ–Ω–≥":
        signals = await get_best_signals('long', update)
        response = signals if signals else "‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'üìâ –õ—É—á—à–µ–µ –≤ —à–æ—Ä—Ç'."
        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=reply_keyboard)
    elif ticker == "üìâ –õ—É—á—à–µ–µ –≤ —à–æ—Ä—Ç":
        signals = await get_best_signals('short', update)
        response = signals if signals else "‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'üìà –õ—É—á—à–µ–µ –≤ –ª–æ–Ω–≥'."
        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=reply_keyboard)
    elif ticker == "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        await update.message.reply_text(INSTRUCTION_MESSAGE, parse_mode='Markdown', reply_markup=reply_keyboard)
    else:
        ignored_inputs = ['/START', '/INSTRUCTION']
        if ticker.upper() in [i.upper() for i in ignored_inputs]:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH).",
                parse_mode='Markdown',
                reply_markup=reply_keyboard
            )
            return
        signal = await analyze_ticker(ticker.upper(), update)
        await update.message.reply_text(signal, parse_mode='Markdown', reply_markup=reply_keyboard)

async def button_handler(update, context):
    query = update.callback_query
    await query.answer()
    print(f"–ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")
    await query.edit_message_text(
        "‚ùå –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–Ω–∏–∑—É.", 
        parse_mode='Markdown'
    )

async def health_check(request):
    return web.Response(text="OK")

async def start_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    port = int(os.getenv('PORT', 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('instruction', instruction))
    application.add_handler(MessageHandler(TEXT & ~COMMAND, handle_ticker))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –∏ polling –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    loop = asyncio.get_event_loop()
    loop.create_task(start_server())
    application.run_polling()

if __name__ == '__main__':
    main()
